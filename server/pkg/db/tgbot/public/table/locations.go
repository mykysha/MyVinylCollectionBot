//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Locations = newLocationsTable("public", "locations", "")

type locationsTable struct {
	postgres.Table

	// Columns
	ID     postgres.ColumnInteger
	UserID postgres.ColumnInteger
	Name   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LocationsTable struct {
	locationsTable

	EXCLUDED locationsTable
}

// AS creates new LocationsTable with assigned alias
func (a LocationsTable) AS(alias string) *LocationsTable {
	return newLocationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LocationsTable with assigned schema name
func (a LocationsTable) FromSchema(schemaName string) *LocationsTable {
	return newLocationsTable(schemaName, a.TableName(), a.Alias())
}

func newLocationsTable(schemaName, tableName, alias string) *LocationsTable {
	return &LocationsTable{
		locationsTable: newLocationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newLocationsTableImpl("", "excluded", ""),
	}
}

func newLocationsTableImpl(schemaName, tableName, alias string) locationsTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		UserIDColumn   = postgres.IntegerColumn("user_id")
		NameColumn     = postgres.StringColumn("name")
		allColumns     = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn}
		mutableColumns = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn}
	)

	return locationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		// Columns
		ID:     IDColumn,
		UserID: UserIDColumn,
		Name:   NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
