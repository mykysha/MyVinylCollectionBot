//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Albums = newAlbumsTable("public", "albums", "")

type albumsTable struct {
	postgres.Table

	//Columns
	ID          postgres.ColumnInteger
	ArtistID    postgres.ColumnInteger
	AlbumName   postgres.ColumnString
	Genre       postgres.ColumnString
	ReleaseYear postgres.ColumnInteger
	ReissueYear postgres.ColumnInteger
	Label       postgres.ColumnInteger
	Coloured    postgres.ColumnBool
	Cover       postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AlbumsTable struct {
	albumsTable

	EXCLUDED albumsTable
}

// AS creates new AlbumsTable with assigned alias
func (a AlbumsTable) AS(alias string) *AlbumsTable {
	return newAlbumsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AlbumsTable with assigned schema name
func (a AlbumsTable) FromSchema(schemaName string) *AlbumsTable {
	return newAlbumsTable(schemaName, a.TableName(), a.Alias())
}

func newAlbumsTable(schemaName, tableName, alias string) *AlbumsTable {
	return &AlbumsTable{
		albumsTable: newAlbumsTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newAlbumsTableImpl("", "excluded", ""),
	}
}

func newAlbumsTableImpl(schemaName, tableName, alias string) albumsTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		ArtistIDColumn    = postgres.IntegerColumn("artist_id")
		AlbumNameColumn   = postgres.StringColumn("album_name")
		GenreColumn       = postgres.StringColumn("genre")
		ReleaseYearColumn = postgres.IntegerColumn("release_year")
		ReissueYearColumn = postgres.IntegerColumn("reissue_year")
		LabelColumn       = postgres.IntegerColumn("label")
		ColouredColumn    = postgres.BoolColumn("coloured")
		CoverColumn       = postgres.StringColumn("cover")
		allColumns        = postgres.ColumnList{IDColumn, ArtistIDColumn, AlbumNameColumn, GenreColumn, ReleaseYearColumn, ReissueYearColumn, LabelColumn, ColouredColumn, CoverColumn}
		mutableColumns    = postgres.ColumnList{IDColumn, ArtistIDColumn, AlbumNameColumn, GenreColumn, ReleaseYearColumn, ReissueYearColumn, LabelColumn, ColouredColumn, CoverColumn}
	)

	return albumsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ArtistID:    ArtistIDColumn,
		AlbumName:   AlbumNameColumn,
		Genre:       GenreColumn,
		ReleaseYear: ReleaseYearColumn,
		ReissueYear: ReissueYearColumn,
		Label:       LabelColumn,
		Coloured:    ColouredColumn,
		Cover:       CoverColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
