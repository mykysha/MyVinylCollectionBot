// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Albums", testAlbums)
	t.Run("Artists", testArtists)
	t.Run("Collections", testCollections)
	t.Run("Infos", testInfos)
	t.Run("Locations", testLocations)
	t.Run("Users", testUsers)
	t.Run("Wishlists", testWishlists)
}

func TestDelete(t *testing.T) {
	t.Run("Albums", testAlbumsDelete)
	t.Run("Artists", testArtistsDelete)
	t.Run("Collections", testCollectionsDelete)
	t.Run("Infos", testInfosDelete)
	t.Run("Locations", testLocationsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Wishlists", testWishlistsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Albums", testAlbumsQueryDeleteAll)
	t.Run("Artists", testArtistsQueryDeleteAll)
	t.Run("Collections", testCollectionsQueryDeleteAll)
	t.Run("Infos", testInfosQueryDeleteAll)
	t.Run("Locations", testLocationsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Wishlists", testWishlistsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Albums", testAlbumsSliceDeleteAll)
	t.Run("Artists", testArtistsSliceDeleteAll)
	t.Run("Collections", testCollectionsSliceDeleteAll)
	t.Run("Infos", testInfosSliceDeleteAll)
	t.Run("Locations", testLocationsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Wishlists", testWishlistsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Albums", testAlbumsExists)
	t.Run("Artists", testArtistsExists)
	t.Run("Collections", testCollectionsExists)
	t.Run("Infos", testInfosExists)
	t.Run("Locations", testLocationsExists)
	t.Run("Users", testUsersExists)
	t.Run("Wishlists", testWishlistsExists)
}

func TestFind(t *testing.T) {
	t.Run("Albums", testAlbumsFind)
	t.Run("Artists", testArtistsFind)
	t.Run("Collections", testCollectionsFind)
	t.Run("Infos", testInfosFind)
	t.Run("Locations", testLocationsFind)
	t.Run("Users", testUsersFind)
	t.Run("Wishlists", testWishlistsFind)
}

func TestBind(t *testing.T) {
	t.Run("Albums", testAlbumsBind)
	t.Run("Artists", testArtistsBind)
	t.Run("Collections", testCollectionsBind)
	t.Run("Infos", testInfosBind)
	t.Run("Locations", testLocationsBind)
	t.Run("Users", testUsersBind)
	t.Run("Wishlists", testWishlistsBind)
}

func TestOne(t *testing.T) {
	t.Run("Albums", testAlbumsOne)
	t.Run("Artists", testArtistsOne)
	t.Run("Collections", testCollectionsOne)
	t.Run("Infos", testInfosOne)
	t.Run("Locations", testLocationsOne)
	t.Run("Users", testUsersOne)
	t.Run("Wishlists", testWishlistsOne)
}

func TestAll(t *testing.T) {
	t.Run("Albums", testAlbumsAll)
	t.Run("Artists", testArtistsAll)
	t.Run("Collections", testCollectionsAll)
	t.Run("Infos", testInfosAll)
	t.Run("Locations", testLocationsAll)
	t.Run("Users", testUsersAll)
	t.Run("Wishlists", testWishlistsAll)
}

func TestCount(t *testing.T) {
	t.Run("Albums", testAlbumsCount)
	t.Run("Artists", testArtistsCount)
	t.Run("Collections", testCollectionsCount)
	t.Run("Infos", testInfosCount)
	t.Run("Locations", testLocationsCount)
	t.Run("Users", testUsersCount)
	t.Run("Wishlists", testWishlistsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Albums", testAlbumsHooks)
	t.Run("Artists", testArtistsHooks)
	t.Run("Collections", testCollectionsHooks)
	t.Run("Infos", testInfosHooks)
	t.Run("Locations", testLocationsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Wishlists", testWishlistsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Albums", testAlbumsInsert)
	t.Run("Albums", testAlbumsInsertWhitelist)
	t.Run("Artists", testArtistsInsert)
	t.Run("Artists", testArtistsInsertWhitelist)
	t.Run("Collections", testCollectionsInsert)
	t.Run("Collections", testCollectionsInsertWhitelist)
	t.Run("Infos", testInfosInsert)
	t.Run("Infos", testInfosInsertWhitelist)
	t.Run("Locations", testLocationsInsert)
	t.Run("Locations", testLocationsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Wishlists", testWishlistsInsert)
	t.Run("Wishlists", testWishlistsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AlbumToArtistUsingArtist", testAlbumToOneArtistUsingArtist)
	t.Run("CollectionToAlbumUsingAlbum", testCollectionToOneAlbumUsingAlbum)
	t.Run("CollectionToLocationUsingLocation", testCollectionToOneLocationUsingLocation)
	t.Run("LocationToUserUsingUser", testLocationToOneUserUsingUser)
	t.Run("WishlistToAlbumUsingAlbum", testWishlistToOneAlbumUsingAlbum)
	t.Run("WishlistToUserUsingOwner", testWishlistToOneUserUsingOwner)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AlbumToCollections", testAlbumToManyCollections)
	t.Run("AlbumToWishlists", testAlbumToManyWishlists)
	t.Run("ArtistToAlbums", testArtistToManyAlbums)
	t.Run("LocationToCollections", testLocationToManyCollections)
	t.Run("UserToLocations", testUserToManyLocations)
	t.Run("UserToOwnerWishlists", testUserToManyOwnerWishlists)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AlbumToArtistUsingAlbums", testAlbumToOneSetOpArtistUsingArtist)
	t.Run("CollectionToAlbumUsingCollections", testCollectionToOneSetOpAlbumUsingAlbum)
	t.Run("CollectionToLocationUsingCollections", testCollectionToOneSetOpLocationUsingLocation)
	t.Run("LocationToUserUsingLocations", testLocationToOneSetOpUserUsingUser)
	t.Run("WishlistToAlbumUsingWishlists", testWishlistToOneSetOpAlbumUsingAlbum)
	t.Run("WishlistToUserUsingOwnerWishlists", testWishlistToOneSetOpUserUsingOwner)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AlbumToArtistUsingAlbums", testAlbumToOneRemoveOpArtistUsingArtist)
	t.Run("CollectionToAlbumUsingCollections", testCollectionToOneRemoveOpAlbumUsingAlbum)
	t.Run("CollectionToLocationUsingCollections", testCollectionToOneRemoveOpLocationUsingLocation)
	t.Run("LocationToUserUsingLocations", testLocationToOneRemoveOpUserUsingUser)
	t.Run("WishlistToAlbumUsingWishlists", testWishlistToOneRemoveOpAlbumUsingAlbum)
	t.Run("WishlistToUserUsingOwnerWishlists", testWishlistToOneRemoveOpUserUsingOwner)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AlbumToCollections", testAlbumToManyAddOpCollections)
	t.Run("AlbumToWishlists", testAlbumToManyAddOpWishlists)
	t.Run("ArtistToAlbums", testArtistToManyAddOpAlbums)
	t.Run("LocationToCollections", testLocationToManyAddOpCollections)
	t.Run("UserToLocations", testUserToManyAddOpLocations)
	t.Run("UserToOwnerWishlists", testUserToManyAddOpOwnerWishlists)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("AlbumToCollections", testAlbumToManySetOpCollections)
	t.Run("AlbumToWishlists", testAlbumToManySetOpWishlists)
	t.Run("ArtistToAlbums", testArtistToManySetOpAlbums)
	t.Run("LocationToCollections", testLocationToManySetOpCollections)
	t.Run("UserToLocations", testUserToManySetOpLocations)
	t.Run("UserToOwnerWishlists", testUserToManySetOpOwnerWishlists)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("AlbumToCollections", testAlbumToManyRemoveOpCollections)
	t.Run("AlbumToWishlists", testAlbumToManyRemoveOpWishlists)
	t.Run("ArtistToAlbums", testArtistToManyRemoveOpAlbums)
	t.Run("LocationToCollections", testLocationToManyRemoveOpCollections)
	t.Run("UserToLocations", testUserToManyRemoveOpLocations)
	t.Run("UserToOwnerWishlists", testUserToManyRemoveOpOwnerWishlists)
}

func TestReload(t *testing.T) {
	t.Run("Albums", testAlbumsReload)
	t.Run("Artists", testArtistsReload)
	t.Run("Collections", testCollectionsReload)
	t.Run("Infos", testInfosReload)
	t.Run("Locations", testLocationsReload)
	t.Run("Users", testUsersReload)
	t.Run("Wishlists", testWishlistsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Albums", testAlbumsReloadAll)
	t.Run("Artists", testArtistsReloadAll)
	t.Run("Collections", testCollectionsReloadAll)
	t.Run("Infos", testInfosReloadAll)
	t.Run("Locations", testLocationsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Wishlists", testWishlistsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Albums", testAlbumsSelect)
	t.Run("Artists", testArtistsSelect)
	t.Run("Collections", testCollectionsSelect)
	t.Run("Infos", testInfosSelect)
	t.Run("Locations", testLocationsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Wishlists", testWishlistsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Albums", testAlbumsUpdate)
	t.Run("Artists", testArtistsUpdate)
	t.Run("Collections", testCollectionsUpdate)
	t.Run("Infos", testInfosUpdate)
	t.Run("Locations", testLocationsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Wishlists", testWishlistsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Albums", testAlbumsSliceUpdateAll)
	t.Run("Artists", testArtistsSliceUpdateAll)
	t.Run("Collections", testCollectionsSliceUpdateAll)
	t.Run("Infos", testInfosSliceUpdateAll)
	t.Run("Locations", testLocationsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Wishlists", testWishlistsSliceUpdateAll)
}
