// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Wishlist is an object representing the database table.
type Wishlist struct {
	ID      int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	OwnerID null.Int    `boil:"owner_id" json:"owner_id,omitempty" toml:"owner_id" yaml:"owner_id,omitempty"`
	AlbumID null.Int    `boil:"album_id" json:"album_id,omitempty" toml:"album_id" yaml:"album_id,omitempty"`
	Store   null.String `boil:"store" json:"store,omitempty" toml:"store" yaml:"store,omitempty"`

	R *wishlistR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L wishlistL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WishlistColumns = struct {
	ID      string
	OwnerID string
	AlbumID string
	Store   string
}{
	ID:      "id",
	OwnerID: "owner_id",
	AlbumID: "album_id",
	Store:   "store",
}

var WishlistTableColumns = struct {
	ID      string
	OwnerID string
	AlbumID string
	Store   string
}{
	ID:      "wishlist.id",
	OwnerID: "wishlist.owner_id",
	AlbumID: "wishlist.album_id",
	Store:   "wishlist.store",
}

// Generated where

var WishlistWhere = struct {
	ID      whereHelperint
	OwnerID whereHelpernull_Int
	AlbumID whereHelpernull_Int
	Store   whereHelpernull_String
}{
	ID:      whereHelperint{field: "\"wishlist\".\"id\""},
	OwnerID: whereHelpernull_Int{field: "\"wishlist\".\"owner_id\""},
	AlbumID: whereHelpernull_Int{field: "\"wishlist\".\"album_id\""},
	Store:   whereHelpernull_String{field: "\"wishlist\".\"store\""},
}

// WishlistRels is where relationship names are stored.
var WishlistRels = struct {
	Album string
	Owner string
}{
	Album: "Album",
	Owner: "Owner",
}

// wishlistR is where relationships are stored.
type wishlistR struct {
	Album *Album `boil:"Album" json:"Album" toml:"Album" yaml:"Album"`
	Owner *User  `boil:"Owner" json:"Owner" toml:"Owner" yaml:"Owner"`
}

// NewStruct creates a new relationship struct
func (*wishlistR) NewStruct() *wishlistR {
	return &wishlistR{}
}

// wishlistL is where Load methods for each relationship are stored.
type wishlistL struct{}

var (
	wishlistAllColumns            = []string{"id", "owner_id", "album_id", "store"}
	wishlistColumnsWithoutDefault = []string{}
	wishlistColumnsWithDefault    = []string{"id", "owner_id", "album_id", "store"}
	wishlistPrimaryKeyColumns     = []string{"id"}
	wishlistGeneratedColumns      = []string{}
)

type (
	// WishlistSlice is an alias for a slice of pointers to Wishlist.
	// This should almost always be used instead of []Wishlist.
	WishlistSlice []*Wishlist
	// WishlistHook is the signature for custom Wishlist hook methods
	WishlistHook func(context.Context, boil.ContextExecutor, *Wishlist) error

	wishlistQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	wishlistType                 = reflect.TypeOf(&Wishlist{})
	wishlistMapping              = queries.MakeStructMapping(wishlistType)
	wishlistPrimaryKeyMapping, _ = queries.BindMapping(wishlistType, wishlistMapping, wishlistPrimaryKeyColumns)
	wishlistInsertCacheMut       sync.RWMutex
	wishlistInsertCache          = make(map[string]insertCache)
	wishlistUpdateCacheMut       sync.RWMutex
	wishlistUpdateCache          = make(map[string]updateCache)
	wishlistUpsertCacheMut       sync.RWMutex
	wishlistUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var wishlistAfterSelectHooks []WishlistHook

var wishlistBeforeInsertHooks []WishlistHook
var wishlistAfterInsertHooks []WishlistHook

var wishlistBeforeUpdateHooks []WishlistHook
var wishlistAfterUpdateHooks []WishlistHook

var wishlistBeforeDeleteHooks []WishlistHook
var wishlistAfterDeleteHooks []WishlistHook

var wishlistBeforeUpsertHooks []WishlistHook
var wishlistAfterUpsertHooks []WishlistHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Wishlist) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Wishlist) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Wishlist) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Wishlist) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Wishlist) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Wishlist) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Wishlist) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Wishlist) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Wishlist) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range wishlistAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWishlistHook registers your hook function for all future operations.
func AddWishlistHook(hookPoint boil.HookPoint, wishlistHook WishlistHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		wishlistAfterSelectHooks = append(wishlistAfterSelectHooks, wishlistHook)
	case boil.BeforeInsertHook:
		wishlistBeforeInsertHooks = append(wishlistBeforeInsertHooks, wishlistHook)
	case boil.AfterInsertHook:
		wishlistAfterInsertHooks = append(wishlistAfterInsertHooks, wishlistHook)
	case boil.BeforeUpdateHook:
		wishlistBeforeUpdateHooks = append(wishlistBeforeUpdateHooks, wishlistHook)
	case boil.AfterUpdateHook:
		wishlistAfterUpdateHooks = append(wishlistAfterUpdateHooks, wishlistHook)
	case boil.BeforeDeleteHook:
		wishlistBeforeDeleteHooks = append(wishlistBeforeDeleteHooks, wishlistHook)
	case boil.AfterDeleteHook:
		wishlistAfterDeleteHooks = append(wishlistAfterDeleteHooks, wishlistHook)
	case boil.BeforeUpsertHook:
		wishlistBeforeUpsertHooks = append(wishlistBeforeUpsertHooks, wishlistHook)
	case boil.AfterUpsertHook:
		wishlistAfterUpsertHooks = append(wishlistAfterUpsertHooks, wishlistHook)
	}
}

// One returns a single wishlist record from the query.
func (q wishlistQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Wishlist, error) {
	o := &Wishlist{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for wishlist")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Wishlist records from the query.
func (q wishlistQuery) All(ctx context.Context, exec boil.ContextExecutor) (WishlistSlice, error) {
	var o []*Wishlist

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Wishlist slice")
	}

	if len(wishlistAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Wishlist records in the query.
func (q wishlistQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count wishlist rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q wishlistQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if wishlist exists")
	}

	return count > 0, nil
}

// Album pointed to by the foreign key.
func (o *Wishlist) Album(mods ...qm.QueryMod) albumQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AlbumID),
	}

	queryMods = append(queryMods, mods...)

	query := Albums(queryMods...)
	queries.SetFrom(query.Query, "\"albums\"")

	return query
}

// Owner pointed to by the foreign key.
func (o *Wishlist) Owner(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.OwnerID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadAlbum allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistL) LoadAlbum(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlist interface{}, mods queries.Applicator) error {
	var slice []*Wishlist
	var object *Wishlist

	if singular {
		object = maybeWishlist.(*Wishlist)
	} else {
		slice = *maybeWishlist.(*[]*Wishlist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistR{}
		}
		if !queries.IsNil(object.AlbumID) {
			args = append(args, object.AlbumID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AlbumID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AlbumID) {
				args = append(args, obj.AlbumID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`albums`),
		qm.WhereIn(`albums.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Album")
	}

	var resultSlice []*Album
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Album")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for albums")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for albums")
	}

	if len(wishlistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Album = foreign
		if foreign.R == nil {
			foreign.R = &albumR{}
		}
		foreign.R.Wishlists = append(foreign.R.Wishlists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AlbumID, foreign.ID) {
				local.R.Album = foreign
				if foreign.R == nil {
					foreign.R = &albumR{}
				}
				foreign.R.Wishlists = append(foreign.R.Wishlists, local)
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (wishlistL) LoadOwner(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWishlist interface{}, mods queries.Applicator) error {
	var slice []*Wishlist
	var object *Wishlist

	if singular {
		object = maybeWishlist.(*Wishlist)
	} else {
		slice = *maybeWishlist.(*[]*Wishlist)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &wishlistR{}
		}
		if !queries.IsNil(object.OwnerID) {
			args = append(args, object.OwnerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &wishlistR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.OwnerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.OwnerID) {
				args = append(args, obj.OwnerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(wishlistAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Owner = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OwnerWishlists = append(foreign.R.OwnerWishlists, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OwnerID, foreign.ID) {
				local.R.Owner = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OwnerWishlists = append(foreign.R.OwnerWishlists, local)
				break
			}
		}
	}

	return nil
}

// SetAlbum of the wishlist to the related item.
// Sets o.R.Album to related.
// Adds o to related.R.Wishlists.
func (o *Wishlist) SetAlbum(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Album) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"album_id"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AlbumID, related.ID)
	if o.R == nil {
		o.R = &wishlistR{
			Album: related,
		}
	} else {
		o.R.Album = related
	}

	if related.R == nil {
		related.R = &albumR{
			Wishlists: WishlistSlice{o},
		}
	} else {
		related.R.Wishlists = append(related.R.Wishlists, o)
	}

	return nil
}

// RemoveAlbum relationship.
// Sets o.R.Album to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Wishlist) RemoveAlbum(ctx context.Context, exec boil.ContextExecutor, related *Album) error {
	var err error

	queries.SetScanner(&o.AlbumID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("album_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Album = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Wishlists {
		if queries.Equal(o.AlbumID, ri.AlbumID) {
			continue
		}

		ln := len(related.R.Wishlists)
		if ln > 1 && i < ln-1 {
			related.R.Wishlists[i] = related.R.Wishlists[ln-1]
		}
		related.R.Wishlists = related.R.Wishlists[:ln-1]
		break
	}
	return nil
}

// SetOwner of the wishlist to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerWishlists.
func (o *Wishlist) SetOwner(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"wishlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner_id"}),
		strmangle.WhereClause("\"", "\"", 2, wishlistPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OwnerID, related.ID)
	if o.R == nil {
		o.R = &wishlistR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &userR{
			OwnerWishlists: WishlistSlice{o},
		}
	} else {
		related.R.OwnerWishlists = append(related.R.OwnerWishlists, o)
	}

	return nil
}

// RemoveOwner relationship.
// Sets o.R.Owner to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Wishlist) RemoveOwner(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.OwnerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("owner_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Owner = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.OwnerWishlists {
		if queries.Equal(o.OwnerID, ri.OwnerID) {
			continue
		}

		ln := len(related.R.OwnerWishlists)
		if ln > 1 && i < ln-1 {
			related.R.OwnerWishlists[i] = related.R.OwnerWishlists[ln-1]
		}
		related.R.OwnerWishlists = related.R.OwnerWishlists[:ln-1]
		break
	}
	return nil
}

// Wishlists retrieves all the records using an executor.
func Wishlists(mods ...qm.QueryMod) wishlistQuery {
	mods = append(mods, qm.From("\"wishlist\""))
	return wishlistQuery{NewQuery(mods...)}
}

// FindWishlist retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWishlist(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Wishlist, error) {
	wishlistObj := &Wishlist{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"wishlist\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, wishlistObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from wishlist")
	}

	if err = wishlistObj.doAfterSelectHooks(ctx, exec); err != nil {
		return wishlistObj, err
	}

	return wishlistObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Wishlist) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	wishlistInsertCacheMut.RLock()
	cache, cached := wishlistInsertCache[key]
	wishlistInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			wishlistAllColumns,
			wishlistColumnsWithDefault,
			wishlistColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(wishlistType, wishlistMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(wishlistType, wishlistMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"wishlist\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"wishlist\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into wishlist")
	}

	if !cached {
		wishlistInsertCacheMut.Lock()
		wishlistInsertCache[key] = cache
		wishlistInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Wishlist.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Wishlist) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	wishlistUpdateCacheMut.RLock()
	cache, cached := wishlistUpdateCache[key]
	wishlistUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			wishlistAllColumns,
			wishlistPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update wishlist, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"wishlist\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, wishlistPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(wishlistType, wishlistMapping, append(wl, wishlistPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update wishlist row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for wishlist")
	}

	if !cached {
		wishlistUpdateCacheMut.Lock()
		wishlistUpdateCache[key] = cache
		wishlistUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q wishlistQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for wishlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for wishlist")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WishlistSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"wishlist\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, wishlistPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in wishlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all wishlist")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Wishlist) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no wishlist provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(wishlistColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	wishlistUpsertCacheMut.RLock()
	cache, cached := wishlistUpsertCache[key]
	wishlistUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			wishlistAllColumns,
			wishlistColumnsWithDefault,
			wishlistColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			wishlistAllColumns,
			wishlistPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert wishlist, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(wishlistPrimaryKeyColumns))
			copy(conflict, wishlistPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"wishlist\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(wishlistType, wishlistMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(wishlistType, wishlistMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert wishlist")
	}

	if !cached {
		wishlistUpsertCacheMut.Lock()
		wishlistUpsertCache[key] = cache
		wishlistUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Wishlist record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Wishlist) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Wishlist provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), wishlistPrimaryKeyMapping)
	sql := "DELETE FROM \"wishlist\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from wishlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for wishlist")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q wishlistQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no wishlistQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlist")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WishlistSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(wishlistBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"wishlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from wishlist slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for wishlist")
	}

	if len(wishlistAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Wishlist) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWishlist(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WishlistSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WishlistSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), wishlistPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"wishlist\".* FROM \"wishlist\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, wishlistPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WishlistSlice")
	}

	*o = slice

	return nil
}

// WishlistExists checks if the Wishlist row exists.
func WishlistExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"wishlist\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if wishlist exists")
	}

	return exists, nil
}
