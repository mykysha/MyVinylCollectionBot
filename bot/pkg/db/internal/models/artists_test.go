// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArtists(t *testing.T) {
	t.Parallel()

	query := Artists()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArtistsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Artists().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtistSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtistsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArtistExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Artist exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArtistExists to return true, but got false.")
	}
}

func testArtistsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	artistFound, err := FindArtist(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if artistFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArtistsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Artists().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArtistsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Artists().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArtistsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artistOne := &Artist{}
	artistTwo := &Artist{}
	if err = randomize.Struct(seed, artistOne, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}
	if err = randomize.Struct(seed, artistTwo, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Artists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArtistsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	artistOne := &Artist{}
	artistTwo := &Artist{}
	if err = randomize.Struct(seed, artistOne, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}
	if err = randomize.Struct(seed, artistTwo, artistDBTypes, false, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artistOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artistTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func artistBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func artistAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Artist) error {
	*o = Artist{}
	return nil
}

func testArtistsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Artist{}
	o := &Artist{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, artistDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Artist object: %s", err)
	}

	AddArtistHook(boil.BeforeInsertHook, artistBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	artistBeforeInsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterInsertHook, artistAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	artistAfterInsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterSelectHook, artistAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	artistAfterSelectHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeUpdateHook, artistBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	artistBeforeUpdateHooks = []ArtistHook{}

	AddArtistHook(boil.AfterUpdateHook, artistAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	artistAfterUpdateHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeDeleteHook, artistBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	artistBeforeDeleteHooks = []ArtistHook{}

	AddArtistHook(boil.AfterDeleteHook, artistAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	artistAfterDeleteHooks = []ArtistHook{}

	AddArtistHook(boil.BeforeUpsertHook, artistBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	artistBeforeUpsertHooks = []ArtistHook{}

	AddArtistHook(boil.AfterUpsertHook, artistAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	artistAfterUpsertHooks = []ArtistHook{}
}

func testArtistsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(artistColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtistToManyAlbums(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Artist
	var b, c Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, albumDBTypes, false, albumColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ArtistID, a.ID)
	queries.Assign(&c.ArtistID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Albums().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ArtistID, b.ArtistID) {
			bFound = true
		}
		if queries.Equal(v.ArtistID, c.ArtistID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ArtistSlice{&a}
	if err = a.L.LoadAlbums(ctx, tx, false, (*[]*Artist)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Albums); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Albums = nil
	if err = a.L.LoadAlbums(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Albums); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testArtistToManyAddOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Artist
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Album{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAlbums(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ArtistID) {
			t.Error("foreign key was wrong value", a.ID, first.ArtistID)
		}
		if !queries.Equal(a.ID, second.ArtistID) {
			t.Error("foreign key was wrong value", a.ID, second.ArtistID)
		}

		if first.R.Artist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Artist != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Albums[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Albums[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Albums().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testArtistToManySetOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Artist
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAlbums(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAlbums(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ArtistID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ArtistID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ArtistID) {
		t.Error("foreign key was wrong value", a.ID, d.ArtistID)
	}
	if !queries.Equal(a.ID, e.ArtistID) {
		t.Error("foreign key was wrong value", a.ID, e.ArtistID)
	}

	if b.R.Artist != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Artist != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Artist != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Artist != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Albums[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Albums[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testArtistToManyRemoveOpAlbums(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Artist
	var b, c, d, e Album

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artistDBTypes, false, strmangle.SetComplement(artistPrimaryKeyColumns, artistColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Album{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, albumDBTypes, false, strmangle.SetComplement(albumPrimaryKeyColumns, albumColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAlbums(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAlbums(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Albums().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ArtistID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ArtistID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Artist != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Artist != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Artist != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Artist != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Albums) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Albums[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Albums[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testArtistsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtistsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtistSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtistsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Artists().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	artistDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`}
	_             = bytes.MinRead
)

func testArtistsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(artistAllColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artistDBTypes, true, artistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArtistsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(artistAllColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Artist{}
	if err = randomize.Struct(seed, o, artistDBTypes, true, artistColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artistDBTypes, true, artistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(artistAllColumns, artistPrimaryKeyColumns) {
		fields = artistAllColumns
	} else {
		fields = strmangle.SetComplement(
			artistAllColumns,
			artistPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArtistSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArtistsUpsert(t *testing.T) {
	t.Parallel()

	if len(artistAllColumns) == len(artistPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Artist{}
	if err = randomize.Struct(seed, &o, artistDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Artist: %s", err)
	}

	count, err := Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, artistDBTypes, false, artistPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artist struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Artist: %s", err)
	}

	count, err = Artists().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
