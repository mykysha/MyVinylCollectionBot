// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInfos(t *testing.T) {
	t.Parallel()

	query := Infos()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInfosDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfosQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Infos().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfosSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfoSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInfosExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InfoExists(ctx, tx, o.OnerowID)
	if err != nil {
		t.Errorf("Unable to check if Info exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InfoExists to return true, but got false.")
	}
}

func testInfosFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	infoFound, err := FindInfo(ctx, tx, o.OnerowID)
	if err != nil {
		t.Error(err)
	}

	if infoFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInfosBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Infos().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInfosOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Infos().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInfosAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	infoOne := &Info{}
	infoTwo := &Info{}
	if err = randomize.Struct(seed, infoOne, infoDBTypes, false, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}
	if err = randomize.Struct(seed, infoTwo, infoDBTypes, false, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Infos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInfosCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	infoOne := &Info{}
	infoTwo := &Info{}
	if err = randomize.Struct(seed, infoOne, infoDBTypes, false, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}
	if err = randomize.Struct(seed, infoTwo, infoDBTypes, false, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = infoOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = infoTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func infoBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func infoAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Info) error {
	*o = Info{}
	return nil
}

func testInfosHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Info{}
	o := &Info{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, infoDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Info object: %s", err)
	}

	AddInfoHook(boil.BeforeInsertHook, infoBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	infoBeforeInsertHooks = []InfoHook{}

	AddInfoHook(boil.AfterInsertHook, infoAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	infoAfterInsertHooks = []InfoHook{}

	AddInfoHook(boil.AfterSelectHook, infoAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	infoAfterSelectHooks = []InfoHook{}

	AddInfoHook(boil.BeforeUpdateHook, infoBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	infoBeforeUpdateHooks = []InfoHook{}

	AddInfoHook(boil.AfterUpdateHook, infoAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	infoAfterUpdateHooks = []InfoHook{}

	AddInfoHook(boil.BeforeDeleteHook, infoBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	infoBeforeDeleteHooks = []InfoHook{}

	AddInfoHook(boil.AfterDeleteHook, infoAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	infoAfterDeleteHooks = []InfoHook{}

	AddInfoHook(boil.BeforeUpsertHook, infoBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	infoBeforeUpsertHooks = []InfoHook{}

	AddInfoHook(boil.AfterUpsertHook, infoAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	infoAfterUpsertHooks = []InfoHook{}
}

func testInfosInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfosInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(infoColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInfosReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfosReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InfoSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInfosSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Infos().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	infoDBTypes = map[string]string{`OnerowID`: `boolean`, `Starttime`: `character varying`}
	_           = bytes.MinRead
)

func testInfosUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(infoPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(infoAllColumns) == len(infoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infoDBTypes, true, infoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInfosSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(infoAllColumns) == len(infoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Info{}
	if err = randomize.Struct(seed, o, infoDBTypes, true, infoColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, infoDBTypes, true, infoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(infoAllColumns, infoPrimaryKeyColumns) {
		fields = infoAllColumns
	} else {
		fields = strmangle.SetComplement(
			infoAllColumns,
			infoPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InfoSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInfosUpsert(t *testing.T) {
	t.Parallel()

	if len(infoAllColumns) == len(infoPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Info{}
	if err = randomize.Struct(seed, &o, infoDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Info: %s", err)
	}

	count, err := Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, infoDBTypes, false, infoPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Info struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Info: %s", err)
	}

	count, err = Infos().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
