// Code generated by SQLBoiler 4.9.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Album is an object representing the database table.
type Album struct {
	ID          int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	ArtistID    int    `boil:"artist_id" json:"artist_id" toml:"artist_id" yaml:"artist_id"`
	AlbumName   string `boil:"album_name" json:"album_name" toml:"album_name" yaml:"album_name"`
	Genre       string `boil:"genre" json:"genre" toml:"genre" yaml:"genre"`
	ReleaseYear int    `boil:"release_year" json:"release_year" toml:"release_year" yaml:"release_year"`
	ReissueYear int    `boil:"reissue_year" json:"reissue_year" toml:"reissue_year" yaml:"reissue_year"`
	Label       string `boil:"label" json:"label" toml:"label" yaml:"label"`
	Coloured    bool   `boil:"coloured" json:"coloured" toml:"coloured" yaml:"coloured"`
	CoverID     string `boil:"cover_id" json:"cover_id" toml:"cover_id" yaml:"cover_id"`

	R *albumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L albumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AlbumColumns = struct {
	ID          string
	ArtistID    string
	AlbumName   string
	Genre       string
	ReleaseYear string
	ReissueYear string
	Label       string
	Coloured    string
	CoverID     string
}{
	ID:          "id",
	ArtistID:    "artist_id",
	AlbumName:   "album_name",
	Genre:       "genre",
	ReleaseYear: "release_year",
	ReissueYear: "reissue_year",
	Label:       "label",
	Coloured:    "coloured",
	CoverID:     "cover_id",
}

var AlbumTableColumns = struct {
	ID          string
	ArtistID    string
	AlbumName   string
	Genre       string
	ReleaseYear string
	ReissueYear string
	Label       string
	Coloured    string
	CoverID     string
}{
	ID:          "albums.id",
	ArtistID:    "albums.artist_id",
	AlbumName:   "albums.album_name",
	Genre:       "albums.genre",
	ReleaseYear: "albums.release_year",
	ReissueYear: "albums.reissue_year",
	Label:       "albums.label",
	Coloured:    "albums.coloured",
	CoverID:     "albums.cover_id",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var AlbumWhere = struct {
	ID          whereHelperint
	ArtistID    whereHelperint
	AlbumName   whereHelperstring
	Genre       whereHelperstring
	ReleaseYear whereHelperint
	ReissueYear whereHelperint
	Label       whereHelperstring
	Coloured    whereHelperbool
	CoverID     whereHelperstring
}{
	ID:          whereHelperint{field: "\"albums\".\"id\""},
	ArtistID:    whereHelperint{field: "\"albums\".\"artist_id\""},
	AlbumName:   whereHelperstring{field: "\"albums\".\"album_name\""},
	Genre:       whereHelperstring{field: "\"albums\".\"genre\""},
	ReleaseYear: whereHelperint{field: "\"albums\".\"release_year\""},
	ReissueYear: whereHelperint{field: "\"albums\".\"reissue_year\""},
	Label:       whereHelperstring{field: "\"albums\".\"label\""},
	Coloured:    whereHelperbool{field: "\"albums\".\"coloured\""},
	CoverID:     whereHelperstring{field: "\"albums\".\"cover_id\""},
}

// AlbumRels is where relationship names are stored.
var AlbumRels = struct {
	Artist      string
	Collections string
}{
	Artist:      "Artist",
	Collections: "Collections",
}

// albumR is where relationships are stored.
type albumR struct {
	Artist      *Artist         `boil:"Artist" json:"Artist" toml:"Artist" yaml:"Artist"`
	Collections CollectionSlice `boil:"Collections" json:"Collections" toml:"Collections" yaml:"Collections"`
}

// NewStruct creates a new relationship struct
func (*albumR) NewStruct() *albumR {
	return &albumR{}
}

// albumL is where Load methods for each relationship are stored.
type albumL struct{}

var (
	albumAllColumns            = []string{"id", "artist_id", "album_name", "genre", "release_year", "reissue_year", "label", "coloured", "cover_id"}
	albumColumnsWithoutDefault = []string{"artist_id", "album_name", "genre", "release_year", "reissue_year", "label", "coloured", "cover_id"}
	albumColumnsWithDefault    = []string{"id"}
	albumPrimaryKeyColumns     = []string{"id"}
	albumGeneratedColumns      = []string{}
)

type (
	// AlbumSlice is an alias for a slice of pointers to Album.
	// This should almost always be used instead of []Album.
	AlbumSlice []*Album
	// AlbumHook is the signature for custom Album hook methods
	AlbumHook func(boil.Executor, *Album) error

	albumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	albumType                 = reflect.TypeOf(&Album{})
	albumMapping              = queries.MakeStructMapping(albumType)
	albumPrimaryKeyMapping, _ = queries.BindMapping(albumType, albumMapping, albumPrimaryKeyColumns)
	albumInsertCacheMut       sync.RWMutex
	albumInsertCache          = make(map[string]insertCache)
	albumUpdateCacheMut       sync.RWMutex
	albumUpdateCache          = make(map[string]updateCache)
	albumUpsertCacheMut       sync.RWMutex
	albumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var albumAfterSelectHooks []AlbumHook

var albumBeforeInsertHooks []AlbumHook
var albumAfterInsertHooks []AlbumHook

var albumBeforeUpdateHooks []AlbumHook
var albumAfterUpdateHooks []AlbumHook

var albumBeforeDeleteHooks []AlbumHook
var albumAfterDeleteHooks []AlbumHook

var albumBeforeUpsertHooks []AlbumHook
var albumAfterUpsertHooks []AlbumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Album) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range albumAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Album) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range albumBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Album) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range albumAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Album) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range albumBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Album) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range albumAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Album) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range albumBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Album) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range albumAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Album) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range albumBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Album) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range albumAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAlbumHook registers your hook function for all future operations.
func AddAlbumHook(hookPoint boil.HookPoint, albumHook AlbumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		albumAfterSelectHooks = append(albumAfterSelectHooks, albumHook)
	case boil.BeforeInsertHook:
		albumBeforeInsertHooks = append(albumBeforeInsertHooks, albumHook)
	case boil.AfterInsertHook:
		albumAfterInsertHooks = append(albumAfterInsertHooks, albumHook)
	case boil.BeforeUpdateHook:
		albumBeforeUpdateHooks = append(albumBeforeUpdateHooks, albumHook)
	case boil.AfterUpdateHook:
		albumAfterUpdateHooks = append(albumAfterUpdateHooks, albumHook)
	case boil.BeforeDeleteHook:
		albumBeforeDeleteHooks = append(albumBeforeDeleteHooks, albumHook)
	case boil.AfterDeleteHook:
		albumAfterDeleteHooks = append(albumAfterDeleteHooks, albumHook)
	case boil.BeforeUpsertHook:
		albumBeforeUpsertHooks = append(albumBeforeUpsertHooks, albumHook)
	case boil.AfterUpsertHook:
		albumAfterUpsertHooks = append(albumAfterUpsertHooks, albumHook)
	}
}

// One returns a single album record from the query.
func (q albumQuery) One(exec boil.Executor) (*Album, error) {
	o := &Album{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for albums")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Album records from the query.
func (q albumQuery) All(exec boil.Executor) (AlbumSlice, error) {
	var o []*Album

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Album slice")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Album records in the query.
func (q albumQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count albums rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q albumQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if albums exists")
	}

	return count > 0, nil
}

// Artist pointed to by the foreign key.
func (o *Album) Artist(mods ...qm.QueryMod) artistQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArtistID),
	}

	queryMods = append(queryMods, mods...)

	query := Artists(queryMods...)
	queries.SetFrom(query.Query, "\"artists\"")

	return query
}

// Collections retrieves all the collection's Collections with an executor.
func (o *Album) Collections(mods ...qm.QueryMod) collectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"collection\".\"album_id\"=?", o.ID),
	)

	query := Collections(queryMods...)
	queries.SetFrom(query.Query, "\"collection\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"collection\".*"})
	}

	return query
}

// LoadArtist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (albumL) LoadArtist(e boil.Executor, singular bool, maybeAlbum interface{}, mods queries.Applicator) error {
	var slice []*Album
	var object *Album

	if singular {
		object = maybeAlbum.(*Album)
	} else {
		slice = *maybeAlbum.(*[]*Album)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumR{}
		}
		args = append(args, object.ArtistID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumR{}
			}

			for _, a := range args {
				if a == obj.ArtistID {
					continue Outer
				}
			}

			args = append(args, obj.ArtistID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`artists`),
		qm.WhereIn(`artists.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artist")
	}

	var resultSlice []*Artist
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artist")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for artists")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artists")
	}

	if len(albumAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Artist = foreign
		if foreign.R == nil {
			foreign.R = &artistR{}
		}
		foreign.R.Albums = append(foreign.R.Albums, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ArtistID == foreign.ID {
				local.R.Artist = foreign
				if foreign.R == nil {
					foreign.R = &artistR{}
				}
				foreign.R.Albums = append(foreign.R.Albums, local)
				break
			}
		}
	}

	return nil
}

// LoadCollections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (albumL) LoadCollections(e boil.Executor, singular bool, maybeAlbum interface{}, mods queries.Applicator) error {
	var slice []*Album
	var object *Album

	if singular {
		object = maybeAlbum.(*Album)
	} else {
		slice = *maybeAlbum.(*[]*Album)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &albumR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &albumR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`collection`),
		qm.WhereIn(`collection.album_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load collection")
	}

	var resultSlice []*Collection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice collection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on collection")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for collection")
	}

	if len(collectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Collections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &collectionR{}
			}
			foreign.R.Album = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AlbumID {
				local.R.Collections = append(local.R.Collections, foreign)
				if foreign.R == nil {
					foreign.R = &collectionR{}
				}
				foreign.R.Album = local
				break
			}
		}
	}

	return nil
}

// SetArtist of the album to the related item.
// Sets o.R.Artist to related.
// Adds o to related.R.Albums.
func (o *Album) SetArtist(exec boil.Executor, insert bool, related *Artist) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"artist_id"}),
		strmangle.WhereClause("\"", "\"", 2, albumPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ArtistID = related.ID
	if o.R == nil {
		o.R = &albumR{
			Artist: related,
		}
	} else {
		o.R.Artist = related
	}

	if related.R == nil {
		related.R = &artistR{
			Albums: AlbumSlice{o},
		}
	} else {
		related.R.Albums = append(related.R.Albums, o)
	}

	return nil
}

// AddCollections adds the given related objects to the existing relationships
// of the album, optionally inserting them as new records.
// Appends related to o.R.Collections.
// Sets related.R.Album appropriately.
func (o *Album) AddCollections(exec boil.Executor, insert bool, related ...*Collection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AlbumID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"collection\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"album_id"}),
				strmangle.WhereClause("\"", "\"", 2, collectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AlbumID = o.ID
		}
	}

	if o.R == nil {
		o.R = &albumR{
			Collections: related,
		}
	} else {
		o.R.Collections = append(o.R.Collections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &collectionR{
				Album: o,
			}
		} else {
			rel.R.Album = o
		}
	}
	return nil
}

// Albums retrieves all the records using an executor.
func Albums(mods ...qm.QueryMod) albumQuery {
	mods = append(mods, qm.From("\"albums\""))
	return albumQuery{NewQuery(mods...)}
}

// FindAlbum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAlbum(exec boil.Executor, iD int, selectCols ...string) (*Album, error) {
	albumObj := &Album{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"albums\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, albumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from albums")
	}

	if err = albumObj.doAfterSelectHooks(exec); err != nil {
		return albumObj, err
	}

	return albumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Album) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no albums provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	albumInsertCacheMut.RLock()
	cache, cached := albumInsertCache[key]
	albumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			albumAllColumns,
			albumColumnsWithDefault,
			albumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(albumType, albumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"albums\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"albums\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into albums")
	}

	if !cached {
		albumInsertCacheMut.Lock()
		albumInsertCache[key] = cache
		albumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Album.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Album) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	albumUpdateCacheMut.RLock()
	cache, cached := albumUpdateCache[key]
	albumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			albumAllColumns,
			albumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update albums, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"albums\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, albumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, append(wl, albumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update albums row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for albums")
	}

	if !cached {
		albumUpdateCacheMut.Lock()
		albumUpdateCache[key] = cache
		albumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q albumQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for albums")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AlbumSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"albums\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, albumPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in album slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all album")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Album) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no albums provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(albumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	albumUpsertCacheMut.RLock()
	cache, cached := albumUpsertCache[key]
	albumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			albumAllColumns,
			albumColumnsWithDefault,
			albumColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			albumAllColumns,
			albumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert albums, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(albumPrimaryKeyColumns))
			copy(conflict, albumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"albums\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(albumType, albumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(albumType, albumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert albums")
	}

	if !cached {
		albumUpsertCacheMut.Lock()
		albumUpsertCache[key] = cache
		albumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Album record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Album) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Album provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), albumPrimaryKeyMapping)
	sql := "DELETE FROM \"albums\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for albums")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q albumQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no albumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from albums")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for albums")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AlbumSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(albumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, albumPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from album slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for albums")
	}

	if len(albumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Album) Reload(exec boil.Executor) error {
	ret, err := FindAlbum(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AlbumSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AlbumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), albumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"albums\".* FROM \"albums\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, albumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AlbumSlice")
	}

	*o = slice

	return nil
}

// AlbumExists checks if the Album row exists.
func AlbumExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"albums\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if albums exists")
	}

	return exists, nil
}
